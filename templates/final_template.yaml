AWSTemplateFormatVersion: 2010-09-09
# Resources
Resources:
#NiFi parameter
  pNiFiPublicIp:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: NIFI_PUBLIC_IP
      Type: String
      Value: !GetAtt NiFi1Instance.PublicIp
#NiFi EC2 instance
  NiFiInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NiFiRole1

  NiFiRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: NiFiRole1
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  NiFi1Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.small'
      SecurityGroupIds:
        - !Ref NiFiInstanceSecurityGroup
      IamInstanceProfile: !Ref NiFiInstanceProfile
      KeyName: 'nifi'
      ImageId: 'ami-0747bdcabd34c712a'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          sudo su

          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          apt-get update -y

          apt install openjdk-8-jre-headless -y

          echo -e "\nJAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n" >> /etc/environment

          source /etc/environment

          wget https://archive.apache.org/dist/nifi/1.13.2/nifi-1.13.2-bin.tar.gz

          tar -xvf /nifi-1.13.2-bin.tar.gz

          cd /nifi-1.13.2/

          sed -i 's/nifi.web.http.host=127.0.0.1/nifi.web.http.host=/' ./conf/nifi.properties

          wget https://raw.githubusercontent.com/tryptofanik/us-politicians-tweets/twitter-kinesis/flow.xml || wget https://raw.githubusercontent.com/tryptofanik/us-politicians-tweets/master/flow.xml

          gzip flow.xml

          mv flow.xml.gz ./conf/flow.xml.gz

          mkdir ~/.aws

          echo -e "[default]\n" > ~/.aws/credentials

          apt install jq -y

          curl http://169.254.169.254/latest/meta-data/iam/security-credentials/NiFiRole1 | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' >> ~/.aws/credentials

          ./bin/nifi.sh start

  NiFiInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Group for NiFi instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: '8080'
          FromPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          ToPort: '22'
          FromPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          ToPort: '7001'
          FromPort: '7001'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          ToPort: '7002'
          FromPort: '7002'
          CidrIp: 0.0.0.0/0


# Reddit kinesis data stream
  RedditDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: RedditPosts
      AttributeDefinitions:
        - AttributeName: subreddit
          AttributeType: S
        - AttributeName: created
          AttributeType: 'N'
      KeySchema:
        - AttributeName: subreddit
          KeyType: HASH
        - AttributeName: created
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  RedditKinesisDataStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: reddit-stream
      ShardCount: 1

  RedditStreamerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Group for Reddit instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: 22
          FromPort: 22
          CidrIp: 0.0.0.0/0
    
  RedditStreamerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ReddditStreamerRole

  ReddditStreamerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ReddditStreamerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  RedditStreamEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      IamInstanceProfile: !Ref RedditStreamerInstanceProfile
      SecurityGroupIds:
        - !Ref RedditStreamerSG
      KeyName: reddit_scraper_pem
      ImageId: ami-0747bdcabd34c712a
      UserData: !Base64 >
        #!/bin/bash

        sudo apt update

        sudo apt-get  install -y python3


        sudo apt-get install -y python3-pip

        sudo apt-get install -y python3-distutils

        sudo apt-get install -y python3-apt


        python3 -m pip install praw

        python3 -m pip install pandas

        python3 -m pip install boto3


        sudo apt-get install -y awscli

        pip3 install --upgrade awscli


        cd /home/ubuntu


        git clone https://github.com/tryptofanik/us-politicians-tweets.git

        cd us-politicians-tweets

        git checkout master

        chmod 777 stream/reddit-stream.py


        nohup python3 stream/reddit-stream.py &>>
        realtime-comment-stream-log.txt

  GetFromKinesisPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ReadParametersPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'kinesis:DescribeStream'
            - 'kinesis:GetShardIterator'
            - 'kinesis:GetRecords'
            - 'kinesis:PutRecords'
            - 'kinesis:PutRecord'
            - 'kinesis:ListShards'
            - 'kinesis:ListStreams'
          Resource: '*'
      Roles:
        - !Ref NiFiRole1
        - !Ref LambdaRole

  TwitterKinesisDataStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: twitter-stream
      ShardCount: 1

  TwitterLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - GetFromKinesisPolicy
      - LambdaRole
    Properties:
      Code:
        S3Bucket: danonki-code
        S3Key: twitter-kinesis-lambda.zip
      Handler: twitter-kinesis-lambda.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: "root"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "kinesis:GetRecords"
            - "kinesis:GetShardIterator"
            - "kinesis:DescribeStream"
            Resource:
              - !GetAtt RedditKinesisDataStream.Arn
              - !GetAtt TwitterKinesisDataStream.Arn
          - Effect: "Allow"
            Action: "kinesis:ListStreams"
            Resource: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" #Provides write permissions to CloudWatch Logs


  RedditLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: 
      - GetFromKinesisPolicy
      - LambdaRole
    Properties:
      Code:
        S3Bucket: danonki-code
        S3Key: reddit-lambda.zip
      Handler: reddit-lambda.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
    
  RedditSourceMappingKinesisStream:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 10
      EventSourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:kinesis:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':stream/'
            - Ref: RedditKinesisDataStream
      FunctionName:
        'Fn::GetAtt':
          - RedditLambdaFunction
          - Arn
      StartingPosition: TRIM_HORIZON
    
  TweetsDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Tweets
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
        - AttributeName: extractionTime
          AttributeType: 'N'
      KeySchema:
        - AttributeName: user
          KeyType: HASH
        - AttributeName: extractionTime
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
    
  ScrapperRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ScrapperRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" #Provides write permissions to CloudWatch Logs

  TwitterSourceMappingKinesisStream:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn:
      - TwitterKinesisDataStream
      - TwitterLambdaFunction
    Properties:
      BatchSize: 10
      EventSourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:kinesis:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':stream/'
            - Ref: TwitterKinesisDataStream
      FunctionName:
        'Fn::GetAtt':
          - TwitterLambdaFunction
          - Arn
      StartingPosition: TRIM_HORIZON

  TwitterStreamerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: TwitterStreamerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
    

  GetCurrentUserDataRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: GetCurrentUserDataRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
    
  TweetsReaderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: TweetsReaderRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
    
  PutKinesisDataStreamPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: PutKinesisDataStreamPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action:
            - 'kinesis:PutRecord'
            - 'kinesis:PutRecords'
            - 'kinesis:DescribeStream'
            - 'kinesis:*' #testing
          Resource: !GetAtt RedditKinesisDataStream.Arn
      Roles:
        - !Ref ReddditStreamerRole
        - !Ref NiFiRole1
    
  InvokeScrapingPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: TweetsDynamoDBTable
    Properties:
      PolicyName: InvokeScrapingPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action:
            - 'lambda:InvokeFunction'
            - 'lambda:InvokeAsync'
          Resource: '*'
      Roles:
        - !Ref GetCurrentUserDataRole
        - !Ref NiFiRole1
    
  ReadParametersPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ReadParametersPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action:
            - 'ssm:GetParameterHistory'
            - 'ssm:GetParametersByPath'
            - 'ssm:GetParameters'
            - 'ssm:GetParameter'
          Resource: '*'
      Roles:
        - !Ref ScrapperRole
        - !Ref GetCurrentUserDataRole
        - !Ref TwitterStreamerRole
        - !Ref ReddditStreamerRole
        - !Ref LambdaRole

  RunEC2Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: RunEC2Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action:
            - 'ec2:RunInstances'
            - 'ec2:AttachVolume'
            - 'ec2:CreateVolume'
            - 'ec2:CreateSecurityGroup'
          Resource: '*'
      Roles:
        - !Ref TwitterStreamerRole
        - !Ref ReddditStreamerRole
        - !Ref NiFiRole1
    
  ReadS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ReadS3Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action:
            - 's3:GetObject'
          Resource: 'arn:aws:s3:::danonki-code/'
      Roles:
        - !Ref TwitterStreamerRole
    
  ReadDynamoDBPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: TweetsDynamoDBTable
    Properties:
      PolicyName: ReadTweetsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action:
            - 'dynamodb:Scan'
            - 'dynamodb:Describe*'
            - 'dynamodb:Get*'
            - 'dynamodb:Query'
            - 'dynamodb:List*'
          Resource: !GetAtt 
            - TweetsDynamoDBTable
            - Arn
      Roles:
        - !Ref TweetsReaderRole
        - !Ref GetCurrentUserDataRole
        - !Ref NiFiRole1
        - !Ref LambdaRole
    
  WriteDynamoDBPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: TweetsDynamoDBTable
    Properties:
      PolicyName: WriteTweetsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Action:
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:UpdateTable'
          Resource:
            - !GetAtt TweetsDynamoDBTable.Arn
            - !GetAtt RedditDynamoDBTable.Arn
      Roles:
        - !Ref ScrapperRole
        - !Ref TwitterStreamerRole
        - !Ref NiFiRole1
        - !Ref LambdaRole
    
  TwitterAPIExtractor:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - ScrapperRole
    Properties:
      FunctionName: TwitterAPIExtractor
      Runtime: python3.8
      Timeout: 60
      Handler: lambda_function.lambda_handler
      Role: !GetAtt 
        - ScrapperRole
        - Arn
      Code:
        S3Bucket: danonki-code
        S3Key: twitter_api_extractor.zip

  TwitterMetaExtractor:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - ScrapperRole
    Properties:
      FunctionName: TwitterMetaExtractor
      Runtime: python3.8
      Timeout: 10
      Handler: lambda_function.lambda_handler
      Role: !GetAtt 
        - ScrapperRole
        - Arn
      Code:
        S3Bucket: danonki-code
        S3Key: twitter_meta_extractor.zip
    
  TwitterStreamerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: TwitterStreamerSG
      GroupDescription: SG for TwitterStreamer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
    
  TwitterStreamerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: TwitterStreamerInstanceProfile
      Path: /
      Roles:
        - !Ref TwitterStreamerRole
    
  TwitterStreamerEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      IamInstanceProfile: !Ref TwitterStreamerInstanceProfile
      SecurityGroups:
        - !Ref TwitterStreamerSG
      ImageId: ami-083654bd07b5da81d
      KeyName: test_aws_scraper
      UserData: !Base64 >
        #!/bin/bash

        sudo apt update

        sudo apt install python3-pip -y

        cd /home/ubuntu

        git clone https://github.com/tryptofanik/us-politicians-tweets.git

        cd us-politicians-tweets

        pip install -r requirements.txt

        python3 stream/twitter_stream.py
Outputs:
  NiFiUIUrl:
    Description: Link to NiFi UI
    Value: !Sub "http://${NiFi1Instance.PublicIp}:8080/nifi"